#!/bin/bash

SERIAL=
MODEL="barcelona"

UTMPD="$TESTROOT/etc/mininas/sysupgrade/tmp"
SYSU_FILE="$TESTROOT/etc/mininas/sysupgrade/tmp/sysupgrade"
CURR_FILE="$TESTROOT/etc/mininas/sysupgrade/curr_version"
NEXT_FILE="$TESTROOT/etc/mininas/sysupgrade/next_version"
STATUS_FILE="$TESTROOT/etc/mininas/sysupgrade/status"

# for test purpose
FAKESERIAL="801D0900041"

exit_status_none () {
    
    if [ ! -z "$1" ]; then echo $1; fi
    echo "none" > $STATUS_FILE
    exit 0
}

#
# in this stage, none\downloading\ready status should be untouched
#
retrieve_upgrade_info () {

    if [ ! -e $TESTROOT/etc/mininas/sysupgrade/curr_version ]; then
        echo "curr_version file missing"
        exit 0
    fi

    # /mininas/sysupgrade/curr_version is immutable
    REVISION=$( cat $TESTROOT/etc/mininas/sysupgrade/curr_version )

    if [ ! -z "$TESTROOT" ]; then
        SERIAL=$FAKESERIAL
    else
        # get sn from rom
        SERIAL=$( dd if=/dev/mtdblock0 bs=1 skip=1697760 count=11 )
        if [ -z "$SERIAL" ]; then 
            SERIAL="unknown"; 
        fi
    fi

    rm -rf "$SYSU_FILE"
    SYSU_URL="http://sysupgrade.wisnuc.com/NasUpdate/index.aspx?serial=${SERIAL}&model=${MODEL}&revision=${REVISION}"
    curl -o "$SYSU_FILE" "$SYSU_URL"
    # curl's exit code useless

    if [ ! -e "$SYSU_FILE" ]; then echo "sysupgrade file not found"; exit 0; fi

    # retrieve first REVISION line
    NEXTVER=$( cat $SYSU_FILE | grep -P "^REVISION +${REVISION} +\d+ *$" | head -n 1 | awk '{ print $3 }' )
    if [ -z "$NEXTVER" ]; then echo "next revision not found"; exit 0; fi

    # integer test
    if [ "$NEXTVER" -eq "$NEXTVER" ]; then
        echo "next_version is $NEXTVER"
    else 
        echo "$NEXTVER is not an integer, quit"
        exit 0
    fi
}

#
# stage 2: 
#
retrieve_and_deploy () {

    echo "downloading" > $STATUS_FILE
    
    local line=$( cat $SYSU_FILE | grep -P "^BOOT +${REVISION} +${NEXTVER} +" | head -n 1 )
    local url=$( echo "$line" | awk '{ print $4 }' )
    local md5=$( echo "$line" | awk '{ print $5 }' )

    if [ -z "$url" ] || [ -z "$md5" ]; then exit_status_none "boot line format invalid"; fi

    curl -o $UTMPD/boot.tar "$url"

    local checksum=$(md5sum $UTMPD/boot.tar | awk '{ print $1 }' )
    if [ "$checksum" = "$md5" ]; then
        echo "checksum correct"
    else
        rm -rf $UTMPD/boot.tar
        exit_status_none "checksum incorrect, file deleted, retry later."
    fi

    rm -rf ${TESTROOT}/mininas/boot
    mkdir -p ${TESTROOT}/mininas/boot

    tar xf $UTMPD/boot.tar -C ${TESTROOT}/mininas/boot
    if [ "$?" -ne 0 ]; then
        rm -rf ${TESTROOT}/mininas/boot
        rm -rf ${TESTROOT}/${UTMPD}/boot.tar
        exit_status_none "failed to untar boot.tar, file deleted, retry later"
    fi

    echo "ready" > $STATUS_FILE
}

#
# stage 1: retrieve upgrade info, don't touch any status
#
rm -rf $UTMPD
mkdir -p $UTMPD
retrieve_upgrade_info

# here we only concern if status is ready AND nextversion match
# if so, stop; otherwise, continue

NEXTVER_INFILE=$( cat $NEXT_FILE )
STATUS=$( cat $STATUS_FILE )
if [ "$STATUS" = "ready" ] && [ "$NEXTVER" = "$NEXTVER_INFILE" ]; then
    echo "status is ready and no newer version found. quit"
    exit 0
fi

echo "$NEXTVER" > $NEXT_FILE
retrieve_and_deploy




